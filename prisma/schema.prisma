// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                  String    @id @default(cuid()) @db.Uuid
  slug                String    @unique @db.VarChar(63)
  name                String    @db.VarChar(255)
  domain              String?   @unique @db.VarChar(255)
  status              TenantStatus @default(active)
  plan                PlanType @default(free)
  
  // JSON configuration
  config              Json? @default("{\"theme\":{\"primaryColor\":\"#3B82F6\",\"secondaryColor\":\"#10B981\",\"fontFamily\":\"Inter\",\"borderRadius\":\"8px\",\"darkMode\":false},\"features\":{\"maxUsers\":5,\"customDomain\":false,\"apiAccess\":false,\"advancedAnalytics\":false},\"branding\":{\"logoUrl\":null,\"faviconUrl\":null,\"customCSS\":null}}")
  
  // Timestamps
  trial_ends_at       DateTime? @db.Timestamptz
  subscription_ends_at DateTime? @db.Timestamptz
  created_at          DateTime @default(now()) @db.Timestamptz
  updated_at          DateTime @updatedAt @db.Timestamptz
  deleted_at          DateTime? @db.Timestamptz
  
  // Relations
  settings            TenantSetting[]
  users               User[]
  auditLogs           AuditLog[]
  apiKeys             ApiKey[]
  posts               Post[]
  
  @@map("tenants")
}

model TenantSetting {
  id          String   @id @default(cuid()) @db.Uuid
  tenant_id   String   @db.Uuid
  key         String   @db.VarChar(255)
  value       Json?
  created_at  DateTime @default(now()) @db.Timestamptz
  updated_at  DateTime @updatedAt @db.Timestamptz
  
  // Relations
  tenant      Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  
  @@unique([tenant_id, key])
  @@map("tenant_settings")
}

model User {
  id              String   @id @default(cuid()) @db.Uuid
  tenant_id       String   @db.Uuid
  email           String   @db.VarChar(255)
  name            String?  @db.VarChar(255)
  role            UserRole @default(member)
  
  // Auth fields
  password_hash   String?  @db.VarChar(255)
  email_verified  Boolean  @default(false)
  last_login_at   DateTime? @db.Timestamptz
  
  // Timestamps
  created_at      DateTime @default(now()) @db.Timestamptz
  updated_at      DateTime @updatedAt @db.Timestamptz
  deleted_at      DateTime? @db.Timestamptz
  
  // Relations
  tenant          Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  auditLogs       AuditLog[]
  posts           Post[]
  
  @@unique([tenant_id, email])
  @@map("users")
}

model AuditLog {
  id              String   @id @default(cuid()) @db.Uuid
  tenant_id       String   @db.Uuid
  user_id         String?  @db.Uuid
  action          String   @db.VarChar(100)
  resource_type   String?  @db.VarChar(100)
  resource_id     String?  @db.Uuid
  changes         Json?
  ip_address      String?  @db.Inet
  user_agent      String?  @db.Text
  created_at      DateTime @default(now()) @db.Timestamptz
  
  // Relations
  tenant          Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user            User?    @relation(fields: [user_id], references: [id])
  
  @@map("audit_logs")
}

model ApiKey {
  id           String   @id @default(cuid()) @db.Uuid
  tenant_id    String   @db.Uuid
  name         String   @db.VarChar(255)
  key_hash     String   @unique @db.VarChar(255)
  last_used_at DateTime? @db.Timestamptz
  expires_at   DateTime? @db.Timestamptz
  scopes       Json?    @default("[\"read\"]")
  created_at   DateTime @default(now()) @db.Timestamptz
  revoked_at   DateTime? @db.Timestamptz
  
  // Relations
  tenant       Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model Post {
  id           String   @id @default(cuid()) @db.Uuid
  tenant_id    String   @db.Uuid
  author_id    String   @db.Uuid
  title        String   @db.VarChar(255)
  slug         String   @db.VarChar(255)
  content      String?  @db.Text
  published    Boolean  @default(false)
  published_at DateTime? @db.Timestamptz
  metadata     Json?    @default("{}")
  created_at   DateTime @default(now()) @db.Timestamptz
  updated_at   DateTime @updatedAt @db.Timestamptz
  deleted_at   DateTime? @db.Timestamptz
  
  // Relations
  tenant       Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  author       User     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  
  @@unique([tenant_id, slug])
  @@map("posts")
}

enum TenantStatus {
  active
  suspended
  trial
  cancelled
}

enum PlanType {
  free
  starter
  pro
  enterprise
}

enum UserRole {
  owner
  admin
  member
  viewer
}